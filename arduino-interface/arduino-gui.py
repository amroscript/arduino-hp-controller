"""
    @Author: Amro Farag
    Date: March 2024
    Email: amro.farag@bregroup.com / amrihabfaraj@gmail.com
"""

from datetime import datetime
import sys
from matplotlib.dates import DateFormatter, date2num
import serial
import csv
import time
from bamLoadBasedTesting.twoMassModel import CalcParameters
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QApplication, QLabel, QVBoxLayout, QWidget, QPushButton, \
    QLineEdit, QGridLayout, QGroupBox, QHBoxLayout, QFrame, QPlainTextEdit, \
    QTabWidget, QTableWidget, QTableWidgetItem, QFileDialog
from PyQt5.QtGui import QFont, QColor, QPalette, QPixmap
from PyQt5.QtCore import QTimer, Qt, QSize, QByteArray

# Constants for Arduino connection
ARDUINO_PORT = 'COM4'
BAUD_RATE = 115200

def applyOneDarkProTheme(app):
    app.setStyle("Fusion")
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(37, 37, 38))
    palette.setColor(QPalette.WindowText, QColor(212, 212, 212))
    palette.setColor(QPalette.Base, QColor(30, 30, 30))
    palette.setColor(QPalette.AlternateBase, QColor(45, 45, 48))
    palette.setColor(QPalette.ToolTipBase, QColor(25, 25, 25))
    palette.setColor(QPalette.ToolTipText, QColor(212, 212, 212))
    palette.setColor(QPalette.Text, QColor(212, 212, 212))
    palette.setColor(QPalette.Button, QColor(37, 37, 38))
    palette.setColor(QPalette.ButtonText, QColor(212, 212, 212))
    palette.setColor(QPalette.BrightText, QColor(255, 255, 255))
    palette.setColor(QPalette.Link, QColor(42, 130, 218))
    palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    palette.setColor(QPalette.HighlightedText, QColor(0, 0, 0))
    app.setPalette(palette)

    app.setStyleSheet("""
    QMainWindow, QWidget {
        background-color: #282C34;
    }
    QLineEdit, QLabel, QGroupBox {
        color: #ABB2BF;
        font-family: 'Verdana';
    }
    QLineEdit {
        border: 1px solid #3B4048;
        padding: 5px;
        background-color: #282C34;
        margin: 2px;
    }
    QPushButton {
        background-color: #3B4048;
        color: white;
        border: 2px solid #3B4048;
        border-radius: 5px;
        padding: 5px;
        margin: 2px;
    }
    QPushButton:hover {
        background-color: #4B5263;
    }
    QTabBar::tab {
        min-width: 120px;
        padding: 10px;
    }
    QGroupBox {
        border: 2px solid #3B4048;
        margin-top: 20px;
        padding: 5px;
        border-radius: 5px;
        background-color: #282C34;
    }
    """)

class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.arduinoSerial = None
        self.currentAmbientTemperature = 0  
        self.currentMassFlow = 0.0 
        self.currentDesignHeatingPower = 0  
        self.currentFlowTemperatureDesign = 0 
        self.boostHeatPower = 6000 

        self.t_sup_history = []  
        self.t_ret_history = []  

        self.lastDACVoltage = '0.00'
        self.lastSPtemp = '0.00'
        self.lastFlowRate = '0.00'
        self.lastreturnTemperature = '0.00'
        
        self.hasBeenInitialized = False

        self.logoLabel = None
        self.timer = None
        self.time_data = []
        self.temperature_data = []
        self.flow_rate_data = []
        self.return_temperature_data = []
        self.stopButton = None
        self.measurementGroup = None       
        self.exportCSVButton = None
        self.controlGroup = None
        self.flowRateLabel = None
        self.dacVoltageLabel = None
        self.updateButton = None
        self.projectNumberInput = None
        self.temperatureLabel = None
        self.clientNameInput = None
        self.initButton = None
        self.dateInput = None
        self.terminal = None
        self.tableWidget = None
        self.currentBuildingModel = None

        self.dacVoltageInput = QtWidgets.QLineEdit()
        self.targetTempInput = QtWidgets.QLineEdit()
        self.toleranceInput = QtWidgets.QLineEdit()

        self.setWindowTitle("ArduinoUI")
        self.setupUI()
        applyOneDarkProTheme(QApplication.instance())

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.updateDisplay)
        self.timer.start(100)


        self.loadingTimer = QTimer(self)
        self.loadingTimer.timeout.connect(self.updateLoadingBar)
        self.loadingStep = 0  

        self.graphUpdateTimer = QTimer(self)
        self.graphUpdateTimer.timeout.connect(self.updateGraph)
        self.graphUpdateTimer.start(1000)

        self.initSerialConnection()
        self.updateButton.setEnabled(True)
        self.stopButton.setEnabled(True)
        self.virtualHeaterButton.setEnabled(True)
        self.ssrHeaterButton.setEnabled(True)
        self.dacVoltageInput.setEnabled(False)
        self.targetTempInput.setEnabled(False)
        self.toleranceInput.setEnabled(False)

    def initSerialConnection(self): 
        try:
            self.arduinoSerial = serial.Serial(ARDUINO_PORT, BAUD_RATE, timeout=1)
            self.logToTerminal("> Serial connection established. System initialized.")
        except serial.SerialException as e:
            self.logToTerminal(f"> Error connecting to Arduino: {e}", messageType="error")

    def updateLoadingBar(self):
        if self.loadingStep < 100:
            self.loadingStep += 100
            elapsed = self.loadingStep
            total = 100
            percent = (elapsed / total) * 100
            bar_length = 100  # Adjust the length of the progress bar
            filled_length = int(round(bar_length * elapsed / float(total)))
            bar = 'â–ˆ' * filled_length + '-' * (bar_length - filled_length)
            self.logToTerminal(f"|{bar}|" "  Model Initialized.", messageType="init")
        else:
            self.loadingTimer.stop()
            self.loadingStep = 0  # Reset for next use

    def startLoadingBar(self):
        self.loadingTimer.start() 

    def setupUI(self):
        self.setFont(QFont("Verdana", 12))
        tabWidget = QTabWidget(self)

        # Set a larger window size to accommodate the graphs
        self.setMinimumSize(1500, 950)

        # Embed the icon into the application
        self.logoLabel = QLabel()
        icon_data = b'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IpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhkQAFdREQkAwroIiIiGVBAFxERyYACuoiISAYU0EVERDKggC4iIpIBBXQREZEMKKCLiIhk4P8BkiawjLPhy8UAAAAASUVORK5CYII='
        icon_pixmap = QPixmap()
        icon_pixmap.loadFromData(QByteArray.fromBase64(icon_data))
        scaledLogoPixmap = icon_pixmap.scaled(700, 500, Qt.KeepAspectRatio)
        self.logoLabel.setPixmap(scaledLogoPixmap)
        self.logoLabel.setAlignment(Qt.AlignCenter)

        controlsTab = QWidget()
        controlsLayout = QVBoxLayout()
        controlsLayout.addWidget(self.logoLabel)
        self.measurementGroup = self.createMeasurementGroup()
        self.controlGroup = self.createControlGroup()
        self.terminal = self.createTerminal()
        controlsLayout.addWidget(self.measurementGroup)
        controlsLayout.addWidget(self.controlGroup)
        controlsLayout.addWidget(self.terminal, 1)
        controlsTab.setLayout(controlsLayout)

        spreadsheetTab = QWidget()
        spreadsheetLayout = QVBoxLayout(spreadsheetTab)

        tableFrame = QFrame()
        tableLayout = QVBoxLayout()
        tableFrame.setLayout(tableLayout)

        headerLayout = QHBoxLayout()
        self.projectNumberInput = QLineEdit()
        self.projectNumberInput.setPlaceholderText("Project Number")
        self.projectNumberInput.setMaximumWidth(300)
        self.clientNameInput = QLineEdit()
        self.clientNameInput.setPlaceholderText("Client Name")
        self.clientNameInput.setMaximumWidth(300)
        self.dateInput = QLineEdit()
        self.dateInput.setPlaceholderText("Date (YYYY-MM-DD)")
        self.dateInput.setMaximumWidth(300)
        self.exportCSVButton = QPushButton("Export to CSV")
        self.exportCSVButton.clicked.connect(self.exportToCSV)
        self.exportCSVButton.setStyleSheet("font-size: 10pt;")
        
        headerLayout.addWidget(self.projectNumberInput)
        headerLayout.addWidget(self.clientNameInput)
        headerLayout.addWidget(self.dateInput)
        headerLayout.addWidget(self.exportCSVButton)

        tableLayout.addLayout(headerLayout)

        # Adjust the table to include all necessary columns
        self.tableWidget = QTableWidget()
        self.tableWidget.setColumnCount(12)  # Updated count according to the new columns
        self.tableWidget.setHorizontalHeaderLabels([
            "Time", "Supply Temperature", "DAC Voltage", "Flow Rate", "SP Temperature", 
            "Return Temperature", "Heat Flow HB", "Heat Flow BA", "Heat Flow HP", 
            "HF Internal Gains", "HF Booster Heater", "Building Temperature"
        ])

        # Adjust column widths to ensure proper display
        for i in range(12):
            self.tableWidget.setColumnWidth(i, 150)  # Adjust width as needed

        self.tableWidget.setStyleSheet("""
            QTableWidget {
                border: none;
                background-color: #282C34;
                color: #ABB2BF;
                gridline-color: #3B4048;
                selection-background-color: #3E4451;
                selection-color: #ABB2BF;
                font-size: 9pt;
            }
            QTableWidget::item {
                padding: 5px;
            }
            QHeaderView::section {
                background-color: #3B4048;
                color: #ABB2BF;
                padding: 5px;
                border: 1px solid #282C34;
                font-size: 9pt;
                font-family: 'Verdana';
            }
        """)

        tableLayout.addWidget(self.tableWidget)
        spreadsheetLayout.addWidget(tableFrame)
        spreadsheetTab.setLayout(spreadsheetLayout)

        self.graphTab = QWidget()
        self.graphLayout = QVBoxLayout()
        self.graphTab.setLayout(self.graphLayout)

        self.figure = Figure(facecolor='#282C34')
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setStyleSheet("QWidget {background-color: #282C34; color: #ABB2BF;}")

        self.setupGraph()
        self.updateGraph()

        self.graphLayout.addWidget(self.canvas)
        tabWidget.addTab(controlsTab, "Controls Monitor")
        tabWidget.addTab(spreadsheetTab, "Data Spreadsheet")
        tabWidget.addTab(self.graphTab, "Temperature Graph")

        self.setCentralWidget(tabWidget)
        applyOneDarkProTheme(QApplication.instance())
        

    def createMeasurementGroup(self):
        group = QGroupBox("Instructions and Real-time Measurements")
        group.setFont(QFont("Verdana", 11, QFont.Bold))

        mainLayout = QHBoxLayout(group)

        instructionsLayout = QVBoxLayout()
        instructionsLabel = QLabel("""
        <p>
        1. The <span style='color: #98C379;'>Initialize</span> button must be clicked to activate building model parameters or if operations are stopped.<br>
        2. The building model control parameters are initialized & updated when the <span style='color: #61AFEF;'>Update Settings</span> button is clicked.<br>
        3. The <span style='color: #E06C75;'>Stop</span> button will halt all operations. Re-initialization is required if testing to be resumed.<br><br>
        For clarification please consult the github repo documentation: github.com/amroscript/arduino-hp-controller.
        </p>
        """)
        instructionsLabel.setFont(QFont("Verdana", 11))
        instructionsLayout.addWidget(instructionsLabel)

        line = QFrame()
        line.setFrameShape(QFrame.VLine)
        line.setFrameShadow(QFrame.Sunken)
        line.setStyleSheet("color: #3B4048")

        mainLayout.addLayout(instructionsLayout)
        mainLayout.addWidget(line)

        dataLayout = QGridLayout()

        uniform_font = QFont("Verdana", 11)
        uniform_font.setBold(True)

        temperatureLabel = QLabel("â†» Supply Temperature:")
        dacVoltageLabel = QLabel("â‡ˆ DAC Output Voltage:")
        SPVoltageLabel = QLabel("Set Point Temperature:")
        flowRateLabel = QLabel("Flow Rate:")
        returnTemperatureLabel = QLabel("â†º Return Temperature:")

        for label in [temperatureLabel, dacVoltageLabel, SPVoltageLabel, flowRateLabel, returnTemperatureLabel]:
            label.setFont(uniform_font)

        self.temperatureLabel = QLabel("0Â°C")
        self.dacVoltageLabel = QLabel("0V")
        self.SPVoltageLabel = QLabel("0Â°C")
        self.flowRateLabel = QLabel("0L/s")
        self.returnTemperatureLabel = QLabel("0Â°C")

        for data_label in [self.temperatureLabel, self.dacVoltageLabel, self.SPVoltageLabel, self.flowRateLabel, self.returnTemperatureLabel]:
            data_label.setFont(uniform_font)

        dataLayout.addWidget(temperatureLabel, 1, 0)
        dataLayout.addWidget(self.temperatureLabel, 1, 1)
        dataLayout.addWidget(returnTemperatureLabel, 2, 0)
        dataLayout.addWidget(self.returnTemperatureLabel, 2, 1)
        dataLayout.addWidget(SPVoltageLabel, 3, 0)
        dataLayout.addWidget(self.SPVoltageLabel, 3, 1)
        dataLayout.addWidget(flowRateLabel, 4, 0)
        dataLayout.addWidget(self.flowRateLabel, 4, 1)
        dataLayout.addWidget(dacVoltageLabel, 5, 0)
        dataLayout.addWidget(self.dacVoltageLabel, 5, 1)

        mainLayout.addLayout(dataLayout)

        return group

    def createControlGroup(self):
        group = QGroupBox("Heater Mode Settings")
        group.setFont(QFont("Verdana", 11, QFont.Bold))
        layout = QVBoxLayout(group)

        heaterButtonLayout = QHBoxLayout()
        self.ssrHeaterButton = QPushButton("SOLID STATE RELAY HEATER")
        self.virtualHeaterButton = QPushButton("BAM TWO MASS MODEL")

        for btn in [self.ssrHeaterButton, self.virtualHeaterButton]:
            btn.setCheckable(True)
            btn.setFixedHeight(31)
            btn.setFont(QFont("Satoshi", 8, QFont.Bold))  
            self.ssrHeaterButton.toggled.connect(self.updateHeaterButtonState)
            self.virtualHeaterButton.toggled.connect(self.updateHeaterButtonState)
            heaterButtonLayout.addWidget(btn)
            self.ssrHeaterButton.setChecked(False)
            self.virtualHeaterButton.setChecked(False)

        self.ssrSettingsGroup = self.createSSRSettingsGroup()
        self.virtualHeaterSettingsGroup = self.createVirtualHeaterSettingsGroup()

        self.updateHeaterButtonState()

        settingsLayout = QHBoxLayout()
        settingsLayout.addWidget(self.ssrSettingsGroup)
        settingsLayout.addWidget(self.virtualHeaterSettingsGroup)

        buttonLayout = QHBoxLayout()
        self.initButton = QPushButton("Initialize")
        self.stopButton = QPushButton("Stop")
        self.updateButton = QPushButton("Update Settings")
        
        for btn in [self.initButton, self.updateButton, self.stopButton]:
            btn.setFixedHeight(31)
            buttonLayout.addWidget(btn)

        layout.addLayout(heaterButtonLayout)
        layout.addLayout(settingsLayout)
        layout.addLayout(buttonLayout)

        self.applyButtonStyles()
        self.initButton.clicked.connect(self.initButtonClicked)
        self.stopButton.clicked.connect(self.stopOperations)
        self.updateButton.clicked.connect(self.updateSettings)

        group.setLayout(layout)
        return group
    
    def validateVirtualHeaterSettings(self):
        try:
            ambient_temp = float(self.ambientTempInput.text())
            q_design_e = float(self.designHeatingPowerInput.text())
            t_start_h = float(self.initialReturnTempInput.text())

            if not -40 <= ambient_temp <= 40:
                self.logToTerminal("Ambient temperature out of expected range: -40 to 40Â°C", messageType="warning")
                return False
            if q_design_e <= 0:
                self.logToTerminal("Design heating power must be greater than 0.", messageType="warning")
                return False
            if not 10 <= t_start_h <= 90:
                self.logToTerminal("Initial return temperature out of expected range: 10 to 90Â°C", messageType="warning")
                return False

            return True
        except ValueError:
            self.logToTerminal("Invalid input: Please check that all fields contain numeric values.", messageType="warning")
            return False

    def updateHeaterButtonState(self):
        activeStyle = "QGroupBox { font: 8pt; font-weight: bold; color: #98C379; }"
        inactiveStyle = "QGroupBox { font: 8pt; font-weight: bold; color: #E06C75; }"
        
        if self.ssrHeaterButton.isChecked():
            self.ssrSettingsGroup.setTitle("SSR Heater: Activated")
            self.ssrSettingsGroup.setStyleSheet(activeStyle)
        else:
            self.ssrSettingsGroup.setTitle("SSR Heater: Off")
            self.ssrSettingsGroup.setStyleSheet(inactiveStyle)
        
        if self.virtualHeaterButton.isChecked():
            self.virtualHeaterSettingsGroup.setTitle("Two Mass Model: Activated")
            self.virtualHeaterSettingsGroup.setStyleSheet(activeStyle)
        else:
            self.virtualHeaterSettingsGroup.setTitle("Two Mass Model: Off")
            self.virtualHeaterSettingsGroup.setStyleSheet(inactiveStyle)
        
        self.ssrSettingsGroup.style().unpolish(self.ssrSettingsGroup)
        self.ssrSettingsGroup.style().polish(self.ssrSettingsGroup)
        self.virtualHeaterSettingsGroup.style().unpolish(self.virtualHeaterSettingsGroup)
        self.virtualHeaterSettingsGroup.style().polish(self.virtualHeaterSettingsGroup)
            
    def createSSRSettingsGroup(self):
        group = QGroupBox("SSR Heater Settings")
        group.setFont(QFont("Verdana", 10, QFont.Bold))
        layout = QGridLayout()

        self.targetTempInput = QLineEdit("23")
        self.addSettingWithButtons(layout, "Target Temperature (Â°C):", self.targetTempInput, 0, font_size= 10.5)

        self.toleranceInput = QLineEdit("0.2")
        self.addSettingWithButtons(layout, "Temperature Tolerance (Â±Â°C):", self.toleranceInput, 1, font_size= 10.5)

        self.dacVoltageInput = QLineEdit("2.5")
        self.addSettingWithButtons(layout, "DAC Voltage Output (V):", self.dacVoltageInput, 2, font_size= 10.5)

        group.setLayout(layout)
        return group

    def createVirtualHeaterSettingsGroup(self):
        group = QGroupBox("Virtual Heater Settings")
        group.setFont(QFont("Verdana", 10, QFont.Bold))
        layout = QGridLayout()

        self.ambientTempInput = QLineEdit("7")
        self.addSettingWithButtons(layout, "Ambient Temperature (Â°C):", self.ambientTempInput, 0, font_size=10.5)
        
        self.designHeatingPowerInput = QLineEdit("3750")
        self.addSettingWithButtons(layout, "Design Heating Power (W):", self.designHeatingPowerInput, 1, font_size=10.5)

        self.initialReturnTempInput = QLineEdit("25")  
        self.addSettingWithButtons(layout, "Initial Return Temperature (Â°C):", self.initialReturnTempInput, 2, font_size=10.5)

        group.setLayout(layout)
        return group
    
    def applyButtonStyles(self):
        buttonFontSize = "8pt" 

        self.initButton.setStyleSheet(f"""
            QPushButton {{
                background-color: #98C379;
                color: white;
                border: 2px solid #98C379;
                font-size: {buttonFontSize};
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #A8D989;
            }}
        """)

        self.updateButton.setStyleSheet(f"""
            QPushButton {{
                background-color: #61AFEF;
                color: white;
                border: 2px solid #61AFEF;
                font-size: {buttonFontSize};
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #72BFF7;
            }}
        """)

        self.stopButton.setStyleSheet(f"""
            QPushButton {{
                background-color: #E06C75;
                color: white;
                border: 2px solid #E06C75;
                font-size: {buttonFontSize};
                font-weight: bold;
            }}
            QPushButton:hover {{
                background-color: #EF7A85;
            }}
        """)

    def updateHeaterButtonState(self):
        activeStyle = "QGroupBox { font: 8pt; font-weight: bold; color: #98C379; }"
        inactiveStyle = "QGroupBox { font: 8pt; font-weight: bold; color: #E06C75; }"
        
        if self.ssrHeaterButton.isChecked():
            self.ssrSettingsGroup.setTitle("SSR HEATER ACTIVATED")
            self.ssrSettingsGroup.setStyleSheet(activeStyle)
            self.targetTempInput.setEnabled(True)
            self.toleranceInput.setEnabled(True)
            self.dacVoltageInput.setEnabled(True)
        else:
            self.ssrSettingsGroup.setTitle("SSR HEATER OFF")
            self.ssrSettingsGroup.setStyleSheet(inactiveStyle)
            self.targetTempInput.setEnabled(False)
            self.toleranceInput.setEnabled(False)
            self.dacVoltageInput.setEnabled(False)
            self.dacVoltageInput.setText("0")

        if self.virtualHeaterButton.isChecked():
            self.virtualHeaterSettingsGroup.setTitle("PARAMETERS READY TO MODIFY")
            self.virtualHeaterSettingsGroup.setStyleSheet(activeStyle)
            self.ambientTempInput.setEnabled(True)
            self.designHeatingPowerInput.setEnabled(True)
            self.initialReturnTempInput.setEnabled(True)
        else:
            self.virtualHeaterSettingsGroup.setTitle("PARAMETERS READ-ONLY")
            self.virtualHeaterSettingsGroup.setStyleSheet(inactiveStyle)
            self.ambientTempInput.setEnabled(False)
            self.designHeatingPowerInput.setEnabled(False)
            self.initialReturnTempInput.setEnabled(False)
        
        self.ssrSettingsGroup.style().unpolish(self.ssrSettingsGroup)
        self.ssrSettingsGroup.style().polish(self.ssrSettingsGroup)
        self.virtualHeaterSettingsGroup.style().unpolish(self.virtualHeaterSettingsGroup)
        self.virtualHeaterSettingsGroup.style().polish(self.virtualHeaterSettingsGroup)

    def addSettingWithButtons(self, layout, labelText, lineEdit, row, font_size=10):
        label = QLabel(labelText)
        label.setFont(QFont("Verdana", int(font_size)))
        layout.addWidget(label, row, 0)

        upButton = QPushButton("+")
        downButton = QPushButton("-")
        upButton.setFont(QFont("Verdana", int(font_size)))
        downButton.setFont(QFont("Verdana", int(font_size)))

        buttonSize = QSize(30, 30)
        upButton.setFixedSize(buttonSize)
        downButton.setFixedSize(buttonSize)

        upButton.clicked.connect(lambda: self.adjustValue(lineEdit, 1))
        downButton.clicked.connect(lambda: self.adjustValue(lineEdit, -1))

        lineEdit.setMinimumSize(QSize(100, 30))
        lineEdit.setFont(QFont("Verdana", int(font_size)))
        lineEdit.setEnabled(True)

        controlLayout = QHBoxLayout()
        controlLayout.addWidget(lineEdit)
        controlLayout.addWidget(upButton)
        controlLayout.addWidget(downButton)

        controlContainer = QWidget()
        controlContainer.setLayout(controlLayout)
        layout.addWidget(controlContainer, row, 1, 1, 2)

    def adjustValue(self, lineEdit, increment):
        try:
            currentValue = float(lineEdit.text())
            newValue = currentValue + increment
            lineEdit.setText(f"{newValue:.2f}")
        except ValueError:
            lineEdit.setText("0.0")

    def toggleHeaterMode(self, isSSRHeaterActive):
        self.ssrHeaterButton.setChecked(isSSRHeaterActive)
        self.virtualHeaterButton.setChecked(not isSSRHeaterActive)
        self.updateHeaterButtons(isSSRHeaterActive)

        if isSSRHeaterActive:
            self.ssrSettingsGroup.setTitle("ACTIVATED")
            self.ssrSettingsGroup.setStyleSheet("QGroupBox { font: 10pt; font-weight: bold; color: #98C379; }")
        else:
            self.ssrSettingsGroup.setTitle("                                                                                                                                                                                                                            OFF")
            self.ssrSettingsGroup.setStyleSheet("QGroupBox { font: 10pt; font-weight: bold; color: #E06C75; }")

        if self.currentMassFlow > 0:
            if not isSSRHeaterActive:
                self.currentBuildingModel = CalcParameters(
                    t_a=self.currentAmbientTemperature, 
                    q_design=self.currentDesignHeatingPower,
                    t_flow_design=self.currentFlowTemperatureDesign,
                    mass_flow=self.currentMassFlow,
                    boostHeat=True, 
                    maxPowBooHea=self.boostHeatPower
                ).createBuilding()
                print("Virtual heater activated.")
            else:
                print("Virtual heater deactivated.")
        else:
            print("Mass flow data is not yet available. Delaying model initialization.")

    def addControlWithButtons(self, layout, lineEdit, row, columnSpan):
        upButton = QPushButton("+")
        downButton = QPushButton("â€“")

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        upButton.setSizePolicy(sizePolicy)
        downButton.setSizePolicy(sizePolicy)

        upButton.setFixedSize(30, 25)
        downButton.setFixedSize(30, 25)

        def increment():
            lineEdit.setText(str(float(lineEdit.text()) + 1))

        def decrement():
            lineEdit.setText(str(float(lineEdit.text()) - 1))

        upButton.clicked.connect(increment)
        downButton.clicked.connect(decrement)

        buttonLayout = QHBoxLayout()
        buttonLayout.addWidget(upButton)
        buttonLayout.addWidget(downButton)

        container = QWidget()
        container.setLayout(buttonLayout)
        layout.addWidget(container, row, columnSpan)

    def initializeBuildingModel(self):
        """
        Initializes the building model with the current parameters from the UI inputs.
        
        This function validates the virtual heater settings and initializes the building model
        using the CalcParameters class. It also initializes temperature histories and logs the
        initialization status to the terminal.
        """
        if not self.validateVirtualHeaterSettings():
            self.logToTerminal("> Invalid virtual heater settings. Please check your inputs.", messageType="warning")
            return

        try:
            ambient_temp = float(self.ambientTempInput.text())
            default_q_design_e = 3750  # Default design heat power at -10Â°C
            q_design_e, t_flow_design, boostHeat = self.adjustDesignParameters(ambient_temp, default_q_design_e)
            mass_flow = max(self.currentMassFlow / 3600.0, 0.001)  # Convert from l/h to kg/s, ensure non-zero

            # Proper initialization of CalcParameters
            calc_params = CalcParameters(
                t_a=ambient_temp,
                q_design=q_design_e,
                t_flow_design=t_flow_design,
                mass_flow=mass_flow,
                boostHeat=boostHeat,
                maxPowBooHea=self.boostHeatPower,
                const_flow=True,  
                tau_b=209125, 
                tau_h=1957,
                t_b=20 
            )
            self.currentBuildingModel = calc_params.createBuilding()
            
            # Initialize temperature histories
            self.t_sup_history = []
            self.t_ret_history = [float(self.initialReturnTempInput.text())]  # Start with the initial return temperature

            self.startLoadingBar()
        except Exception as e:
            self.logToTerminal(f"> Failed to initialize building model: {e}", messageType="error")

    def tempToVoltage(self, temp):
        min_temp = 0
        max_temp = 100
        min_voltage = 0
        max_voltage = 5

        voltage = ((temp - min_temp) / (max_temp - min_temp)) * (max_voltage - min_voltage) + min_voltage

        correction_factor = 1
        corrected_voltage = voltage * correction_factor

        corrected_voltage = max(min(corrected_voltage, max_voltage), min_voltage)

        return corrected_voltage

    def adjustDesignParameters(self, ambient_temp, default_q_design_e):
        heat_pump_sizes = {
            -10: (1.0, 3750, 55),
            -7: (0.885, 5000, 52),
            2: (0.538, 7000, 42),
            7: (0.346, 10800, 36),
            12: (0.154, 24300, 30)
        }

        closest_temp = None
        for temp in sorted(heat_pump_sizes.keys()):
            if ambient_temp >= temp:
                closest_temp = temp
            else:
                break

        if closest_temp is None:
            closest_temp = min(heat_pump_sizes.keys())

        partLoadR, q_design, t_flow_design = heat_pump_sizes[closest_temp]

        new_q_design_e = q_design * partLoadR
        boostHeat = ambient_temp <= -10

        print(f"Ambient Temp: {ambient_temp}, Part Load Ratio: {partLoadR}, Default Design Heating Power: {new_q_design_e}, Target Flow Temp: {t_flow_design}")

        return new_q_design_e, t_flow_design, boostHeat

    def updateDisplay(self):
        """
        Update the display with new serial data and refresh the graphs.
        """
        try:
            if self.arduinoSerial and self.arduinoSerial.in_waiting:
                serialData = self.arduinoSerial.readline().decode('utf-8').strip()
                print(f"Received serial data: {serialData}")

                if ':' in serialData:
                    dataFields = serialData.split(',')
                    dataDict = {}
                    for field in dataFields:
                        if ':' in field:
                            key, value = field.split(':')
                            dataDict[key.strip()] = value.strip()

                    if 'STemp' in dataDict:
                        try:
                            t_sup = float(dataDict['STemp'])
                            self.updateBuildingModel(t_sup)
                            self.temperatureLabel.setText(f"{t_sup:.2f}Â°C")
                        except ValueError as e:
                            print(f"Error converting temperature: {e}")

                    if 'RTemp' in dataDict:
                        try:
                            t_ret_mea = float(dataDict['RTemp'])
                            self.returnTemperatureLabel.setText(f"{t_ret_mea:.2f}Â°C")
                        except ValueError as e:
                            print(f"Error converting return temperature: {e}")
                    
                    dacVoltage = dataDict.get('DACVolt', self.lastDACVoltage)
                    self.dacVoltageLabel.setText(f"{dacVoltage} V")
                    self.lastDACVoltage = dacVoltage

                    if self.currentBuildingModel:
                        model_return_temp = self.currentBuildingModel.t_ret
                        if model_return_temp >= 0:
                            self.SPVoltageLabel.setText(f"{model_return_temp:.2f} Â°C")
                            self.lastSPtemp = model_return_temp
                        else:
                            self.SPVoltageLabel.setText("")

                    flowRate = dataDict.get('FlowRate', self.lastFlowRate)
                    self.flowRateLabel.setText(f"{flowRate} L/s")
                    self.lastFlowRate = flowRate

                    if 'FlowRate' in dataDict:
                        flowRateLPS = float(dataDict['FlowRate'])
                        self.currentMassFlow = flowRateLPS * 3600
                        self.flowRateLabel.setText(f"{flowRateLPS:.3f} L/s")

                        if self.currentBuildingModel:
                            q_hb = self.currentBuildingModel.q_dot_hb
                            q_ba = self.currentBuildingModel.q_dot_ba
                            q_hp = self.currentBuildingModel.q_dot_hp
                            q_int = self.currentBuildingModel.q_dot_int
                            q_bh = self.currentBuildingModel.q_dot_bh
                            t_b = self.currentBuildingModel.MassB.T

                        if self.currentBuildingModel:
                            self.addToSpreadsheet(time.strftime("%H:%M:%S", time.localtime()), dataDict['STemp'], dacVoltage, model_return_temp, flowRate, dataDict.get('RTemp', 'N/A'), q_hb, q_ba, q_hp, q_int, q_bh, t_b)
                            
                    # Call updateGraph to refresh graphs with new data
                    self.updateGraph()
                            
        except serial.SerialException as e:
            self.logToTerminal(f"> Error reading from serial: {e}", messageType="error")

    def updateSettings(self):
        """
        Validates and updates the virtual heater settings only when explicitly invoked by the user interaction with
        the 'Update Settings' button. This method checks the input validity, recalculates the necessary parameters,
        and updates the building model accordingly.
        """
        if not self.validateVirtualHeaterSettings():
            self.logToTerminal("> Validation of virtual heater settings failed.", messageType="warning")
            return

        try:
            ambient_temp = float(self.ambientTempInput.text())
            default_q_design_e = 3750  # Default design heat power at -10Â°C
            q_design_e, t_flow_design, boostHeat = self.adjustDesignParameters(ambient_temp, default_q_design_e)
            mass_flow = max(self.currentMassFlow / 3600.0, 0.001)  # Convert from L/h to kg/s to ensure non-zero mass flow

            # Recalculate parameters and update the building model
            calc_params = CalcParameters(
                t_a=ambient_temp,
                q_design=q_design_e,
                t_flow_design=t_flow_design,
                mass_flow=mass_flow,
                boostHeat=boostHeat,
                maxPowBooHea=self.boostHeatPower,
                const_flow=True,  
                tau_b=209125, 
                tau_h=1957,
                t_b=20 
            )
            self.currentBuildingModel = calc_params.createBuilding()

            # Log updated settings
            self.logToTerminal("> Settings updated successfully.", messageType="info")
        except Exception as e:
            self.logToTerminal(f"> Failed to update settings: {e}", messageType="error")

    def updateBuildingModel(self, new_t_sup):
        if not hasattr(self, 't_sup_history'):
            self.t_sup_history = []
        if not hasattr(self, 't_ret_history'):
            self.t_ret_history = []

        self.t_sup_history.append(new_t_sup)

        last_t_ret = self.t_ret_history[-1] if self.t_ret_history else new_t_sup - 5

        if self.currentBuildingModel is None:
            return

        try:
            mass_flow = max(self.currentMassFlow / 3600.0, 0.001)

            self.currentBuildingModel.doStep(
                t_sup=new_t_sup, 
                t_ret_mea=last_t_ret, 
                m_dot=mass_flow, 
                stepSize=1, 
                q_dot_int=0 
            )

            new_t_ret = self.currentBuildingModel.t_ret

            if new_t_ret < 0:
                self.logToTerminal(f"Warning: Calculated return temperature is negative ({new_t_ret:.2f}Â°C). Resetting to last valid temperature.", messageType="error")
                new_t_ret = last_t_ret

            self.t_ret_history.append(new_t_ret)

            dac_voltage = self.tempToVoltage(new_t_ret)
            self.sendSerialCommand(f"setVoltage {dac_voltage:.2f}")

        except Exception as e:
            self.logToTerminal(f"Failed to update building model: {e}", messageType="error")
            
    def sendSerialCommand(self, command):
        if self.arduinoSerial and self.arduinoSerial.isOpen():
            self.arduinoSerial.write((command + '\n').encode()) 
        else:
            self.logToTerminal("> Error: Serial connection not established.", messageType="error")

    def sendArduinoCommand(self, commandType, value=None):
        if commandType in ['setVoltage', 'setTemp', 'setTolerance']:
            if value is not None:
                command = f"{commandType} {value}"
            else:
                print(f"Value required for command type: {commandType}")
                return
        elif commandType in ['activateVirtualHeater', 'activateSSRHeater']:
            command = commandType
        else:
            print(f"Unknown command type: {commandType}")
            return
        
        self.sendSerialCommand(command)

    def initButtonClicked(self):
        """
        Handles the initialization button click event.
        
        This function establishes the serial connection, starts the update timer,
        initializes the building model, and enables relevant UI components.
        """
        if self.arduinoSerial is None or not self.arduinoSerial.isOpen():
            try:
                self.arduinoSerial = serial.Serial(ARDUINO_PORT, BAUD_RATE, timeout=1)
                if self.hasBeenInitialized:
                    self.logToTerminal("> Serial connection re-established. System re-initialized.")
                else:
                    self.logToTerminal("> Serial connection established. System initialized.")
                    self.hasBeenInitialized = True
            except serial.SerialException as e:
                self.logToTerminal(f"> Error connecting to Arduino: {e}", messageType="error")
                return

        if not self.timer.isActive():
            self.timer.start(100)

        self.stopButton.setEnabled(True)
        self.virtualHeaterButton.setEnabled(True)
        self.ssrHeaterButton.setEnabled(True)
        self.dacVoltageInput.setEnabled(True)
        self.targetTempInput.setEnabled(True)
        self.toleranceInput.setEnabled(True)

        self.initializeBuildingModel()


    def stopOperations(self):
        dacVoltage = 0
        self.sendSerialCommand(f"setVoltage {dacVoltage}")

        if self.timer.isActive():
            self.timer.stop()

        if self.arduinoSerial and self.arduinoSerial.isOpen():
            self.arduinoSerial.close()
            self.logToTerminal("> Serial connection closed.")

        self.updateButton.setEnabled(True)
        self.stopButton.setEnabled(True)
        self.virtualHeaterButton.setEnabled(False)
        self.ssrHeaterButton.setEnabled(False)
        self.dacVoltageInput.setEnabled(False)
        self.targetTempInput.setEnabled(False)
        self.toleranceInput.setEnabled(False)

    def createTerminal(self):
        terminal = QPlainTextEdit()
        terminal.setStyleSheet("""
            background-color: #1E1E1E; 
            color: #D4D4D4; 
            font-family: 'Verdana', monospace;
            font-size: 10pt;
            padding: 1px;
        """)
        terminal.setReadOnly(True)
        return terminal

    def logToTerminal(self, message, messageType="info"):
        messageStyles = {
            "info": "color: #FFFFFF;",
            "warning": "color: #E5C07B;",
            "error": "color: #E06C75;",
            "update": "color: #61AFEF;",
            "init": "color: #98C379;"
        }
        style = messageStyles.get(messageType, "color: #ABB2BF;")
        formattedMessage = f"<p style='{style}'>{message}</p>"
        self.terminal.appendHtml(formattedMessage)

    def addToSpreadsheet(self, timeData, temperature, dacVoltage, model_return_temp, flowRate, returnTemperature, q_hb, q_ba, q_hp, q_int, q_bh, t_b):
        """
        Adds data to the spreadsheet widget and updates the graph data.
        """
        try:
            # Convert values to float or None if 'N/A'
            temperature = float(temperature) if temperature != 'N/A' else None
            dacVoltage = float(dacVoltage) if dacVoltage != 'N/A' else None
            model_return_temp = float(model_return_temp) if model_return_temp != 'N/A' else None
            flowRate = float(flowRate) if flowRate != 'N/A' else None
            returnTemperature = float(returnTemperature) if returnTemperature != 'N/A' else None
            q_hb = float(q_hb) if q_hb != 'N/A' else None
            q_ba = float(q_ba) if q_ba != 'N/A' else None
            q_hp = float(q_hp) if q_hp != 'N/A' else None
            q_int = float(q_int) if q_int != 'N/A' else None
            q_bh = float(q_bh) if q_bh != 'N/A' else None
            t_b = float(t_b) if t_b != 'N/A' else None

            if any(value is None or value == 0 for value in [temperature, dacVoltage, model_return_temp, flowRate, returnTemperature] if value is not None):
                self.logToTerminal("Skipping addition to spreadsheet due to zero or invalid value.", messageType="warning")
                return

            # Define a list of important variables that should not be zero or invalid
            important_values = [
                ('temperature', temperature), 
                ('model_return_temp', model_return_temp), 
                ('flowRate', flowRate), 
                ('returnTemperature', returnTemperature), 
                ('q_hb', q_hb), 
                ('q_ba', q_ba), 
                ('t_b', t_b)
            ]

            # Check for invalid values in important variables
            invalid_values = [(name, value) for name, value in important_values if value is None or value == 0]

            if invalid_values:
                self.logToTerminal(f"Skipping addition to spreadsheet due to zero or invalid value: {invalid_values}", messageType="warning")
                return

            rowPosition = self.tableWidget.rowCount()
            self.tableWidget.insertRow(rowPosition)

            # Format data for display in the spreadsheet
            data = [timeData] + [f"{value:.3f}" if value is not None else "N/A" for value in [
                temperature, dacVoltage, flowRate, model_return_temp, returnTemperature, q_hb, q_ba, q_hp, q_int, q_bh, t_b
            ]]
            
            # Debug print statement to check data being added
            print("Adding to spreadsheet:", data)
            
            # Ensure correct data alignment
            for index, item in enumerate(data):
                self.tableWidget.setItem(rowPosition, index, QTableWidgetItem(item))

            # Scroll to the newly added item for automatic scrolling
            item = self.tableWidget.item(rowPosition, 0)
            if item:
                self.tableWidget.scrollToItem(item)

        except ValueError as e:
            self.logToTerminal(f"Error processing data for spreadsheet: {e}", messageType="error")

    def exportToCSV(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        filePath, _ = QFileDialog.getSaveFileName(self, "Save CSV", "", "CSV Files (*.csv);;All Files (*)", options=options)

        if filePath:
            try:
                with open(filePath, 'w', newline='', encoding='utf-8') as file:
                    writer = csv.writer(file)
                    writer.writerow(['Project Number', self.projectNumberInput.text()])
                    writer.writerow(['Client Name', self.clientNameInput.text()])
                    writer.writerow(['Date', self.dateInput.text()])
                    writer.writerow([])
                    headers = [self.tableWidget.horizontalHeaderItem(i).text() for i in range(self.tableWidget.columnCount())]
                    writer.writerow(headers)
                    for row in range(self.tableWidget.rowCount()):
                        row_data = []
                        for column in range(self.tableWidget.columnCount()):
                            item = self.tableWidget.item(row, column)
                            if item is not None:
                                row_data.append(item.text())
                            else:
                                row_data.append('')
                        writer.writerow(row_data)
                self.logToTerminal("> Data exported to CSV successfully.")
            except Exception as e:
                self.logToTerminal(f"> Failed to export data to CSV: {e}", messageType="error")
        else:
            self.logToTerminal("> CSV export canceled.", messageType="warning")

    def setupGraph(self):
        """
        Sets up the graph layout and axes.
        """
        # Increase the figure size (width, height)
        self.figure = Figure(figsize=(10, 12), facecolor='#282C34')
        self.canvas = FigureCanvas(self.figure)
        self.canvas.setStyleSheet("QWidget {background-color: #282C34; color: #ABB2BF;}")

        # Create a 3-row subplot layout for different graphs with larger height and increased spacing
        gs = self.figure.add_gridspec(3, 1, height_ratios=[1, 1, 1], hspace=0.5, wspace=0.4)

        self.ax_temp = self.figure.add_subplot(gs[0, 0])  # Temperature graph
        self.ax_heat_flow = self.figure.add_subplot(gs[1, 0])  # Heat flow graph
        self.ax_building_temp = self.figure.add_subplot(gs[2, 0])  # Building temperature graph

        # Temperature graph
        self.ax_temp.set_title('Temperature Profile Over Time', color='#ABB2BF')
        self.ax_temp.set_xlabel('Time [hours]', color='#ABB2BF')
        self.ax_temp.set_ylabel('Temperature [Â°C]', color='#ABB2BF')
        self.ax_temp.tick_params(axis='x', colors='white')
        self.ax_temp.tick_params(axis='y', colors='white')
        self.ax_temp.grid(True, color='#4B4B4B')

        # Heat flow graph
        self.ax_heat_flow.set_title('Heat Flow Profile Over Time', color='#ABB2BF')
        self.ax_heat_flow.set_xlabel('Time [hours]', color='#ABB2BF')
        self.ax_heat_flow.set_ylabel('Heat Flow [W]', color='#ABB2BF')
        self.ax_heat_flow.tick_params(axis='x', colors='white')
        self.ax_heat_flow.tick_params(axis='y', colors='white')
        self.ax_heat_flow.grid(True, color='#4B4B4B')

        # Building temperature graph
        self.ax_building_temp.set_title('Building Temperature Over Time', color='#ABB2BF')
        self.ax_building_temp.set_xlabel('Time [hours]', color='#ABB2BF')
        self.ax_building_temp.set_ylabel('Temperature [Â°C]', color='#ABB2BF')
        self.ax_building_temp.tick_params(axis='x', colors='white')
        self.ax_building_temp.tick_params(axis='y', colors='white')
        self.ax_building_temp.grid(True, color='#4B4B4B')

        self.graphLayout.addWidget(self.canvas)

    def updateGraph(self):
        """
        Update the graphs with new data from the table widget.
        """
        # Clear previous plots
        self.ax_temp.clear()
        self.ax_heat_flow.clear()
        self.ax_building_temp.clear()

        # Set titles and labels with updated styles
        self.ax_temp.set_title('Temperature Profile Over Time', color='#ABB2BF')
        self.ax_temp.set_xlabel('Time [hours]', color='#ABB2BF')
        self.ax_temp.set_ylabel('Temperature [Â°C]', color='#ABB2BF')
        self.ax_temp.tick_params(axis='x', colors='white')
        self.ax_temp.tick_params(axis='y', colors='white')
        self.ax_temp.grid(True, color='#4B4B4B')

        self.ax_heat_flow.set_title('Heat Flow Profile Over Time', color='#ABB2BF')
        self.ax_heat_flow.set_xlabel('Time [hours]', color='#ABB2BF')
        self.ax_heat_flow.set_ylabel('Heat Flow [W]', color='#ABB2BF')
        self.ax_heat_flow.tick_params(axis='x', colors='white')
        self.ax_heat_flow.tick_params(axis='y', colors='white')
        self.ax_heat_flow.grid(True, color='#4B4B4B')

        self.ax_building_temp.set_title('Building Temperature Over Time', color='#ABB2BF')
        self.ax_building_temp.set_xlabel('Time [hours]', color='#ABB2BF')
        self.ax_building_temp.set_ylabel('Temperature [Â°C]', color='#ABB2BF')
        self.ax_building_temp.tick_params(axis='x', colors='white')
        self.ax_building_temp.tick_params(axis='y', colors='white')
        self.ax_building_temp.grid(True, color='#4B4B4B')

        # Initialize data lists
        time_data, t_sup_data, t_ret_mea_data, t_b_data = [], [], [], []
        q_flow_hp_data, q_flow_hb_data, q_flow_ba_data, q_flow_int_data, q_flow_bh_data = [], [], [], [], []

        # Process each row in the table widget
        for row in range(self.tableWidget.rowCount()):
            time_item = self.tableWidget.item(row, 0)
            t_sup_item = self.tableWidget.item(row, 1)
            dacVoltage_item = self.tableWidget.item(row, 2)
            flow_rate_item = self.tableWidget.item(row, 3)
            model_return_temp_item = self.tableWidget.item(row, 4)
            t_ret_mea_item = self.tableWidget.item(row, 5)
            q_flow_hb_item = self.tableWidget.item(row, 6)
            q_flow_ba_item = self.tableWidget.item(row, 7)
            q_flow_hp_item = self.tableWidget.item(row, 8)
            q_flow_int_item = self.tableWidget.item(row, 9)
            q_flow_bh_item = self.tableWidget.item(row, 10)
            t_b_item = self.tableWidget.item(row, 11)

            # Ensure items are not None before accessing text
            if all(item is not None for item in [time_item, t_sup_item, flow_rate_item, model_return_temp_item, t_ret_mea_item, q_flow_hb_item, q_flow_ba_item, q_flow_hp_item, q_flow_int_item, q_flow_bh_item, t_b_item]):
                try:
                    time_data.append(date2num(datetime.strptime(time_item.text(), '%H:%M:%S')))
                    t_sup_data.append(float(t_sup_item.text()))
                    t_ret_mea_data.append(float(model_return_temp_item.text()))
                    q_flow_hp_data.append(float(q_flow_hp_item.text()))
                    q_flow_hb_data.append(float(q_flow_hb_item.text()))
                    q_flow_ba_data.append(float(q_flow_ba_item.text()))
                    q_flow_int_data.append(float(q_flow_int_item.text()))
                    q_flow_bh_data.append(float(q_flow_bh_item.text()))
                    t_b_data.append(float(t_b_item.text()))
                except ValueError as e:
                    print(f"Error converting table data: {e}")

        # Plot temperature data
        self.ax_temp.plot(time_data, t_sup_data, label='Supply Temperature (t_sup)', linestyle='-', color='tab:blue')
        self.ax_temp.plot(time_data, t_ret_mea_data, label='Return Temperature (t_ret_mea)', linestyle='--', color='tab:red')
        self.ax_temp.legend(loc='upper right')
        self.ax_temp.xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))

        # Plot heat flow data
        self.ax_heat_flow.plot(time_data, q_flow_hp_data, label='Heat Flow HP to Transfer System (q_hp)', linestyle='-', color='tab:green')
        self.ax_heat_flow.plot(time_data, q_flow_hb_data, label='Heat Flow to Building (q_hb)', linestyle='-', color='tab:orange')
        self.ax_heat_flow.plot(time_data, q_flow_ba_data, label='Heat Flow Building to Ambient (q_ba)', linestyle='-', color='tab:purple')
        self.ax_heat_flow.plot(time_data, q_flow_int_data, label='Heat Flow Internal Gains to Building (q_int)', linestyle='-', color='tab:brown')
        self.ax_heat_flow.plot(time_data, q_flow_bh_data, label='Heat Flow Booster Heater to Heating System (q_bh)', linestyle='-', color='tab:pink')
        self.ax_heat_flow.legend(loc='upper right')
        self.ax_heat_flow.xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))

        # Plot building temperature data
        self.ax_building_temp.plot(time_data, t_b_data, label='Building Temperature (t_b)', linestyle='-', color='tab:gray')
        self.ax_building_temp.legend(loc='upper right')
        self.ax_building_temp.xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))

        # Update canvas
        self.canvas.draw()
        self.canvas.flush_events()

    def closeEvent(self, event):
        dacVoltage = 0
        self.sendSerialCommand(f"setVoltage {dacVoltage}")

        if self.timer.isActive():
            self.timer.stop()

        if self.arduinoSerial and self.arduinoSerial.isOpen():
            self.arduinoSerial.close()
            self.logToTerminal("> Serial connection closed.")

        reply = QtWidgets.QMessageBox.question(self, 'Terminate Window', 'Are you sure you want to close the window?',
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)

        if reply == QtWidgets.QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    applyOneDarkProTheme(app)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
